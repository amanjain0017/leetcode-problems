class Solution {
public:

    int solveMem(int index, int buy, vector<int>& prices,vector<vector<vector<int>>>&dp, int limit){
        if(index==prices.size())       return 0;
        if(limit ==0)                  return 0;

        if(dp[index][buy][limit]!=-1)      return dp[index][buy][limit];

        int profit = 0;
        if(buy){
            int buyStock = -prices[index] + solveMem(index+1, 0,prices ,dp,limit);
            int ignoreStock = 0 + solveMem(index+1, 1, prices,dp,limit);
            profit = max(buyStock, ignoreStock); 
        }
        else{
            int sellStock = prices[index] + solveMem(index+1, 1,prices ,dp,limit-1);
            int ignoreStock = 0 + solveMem(index+1, 0, prices,dp,limit);
            profit = max(sellStock, ignoreStock);
        }
        return dp[index][buy][limit]= profit;
    }

    int solveTab(vector<int>& prices){
        int n = prices.size();
        vector<vector<int>> curr(2,vector<int>(3,0));
        vector<vector<int>> next(2,vector<int>(3,0));

        for(int index = n-1; index>=0; index--){
            for(int buy = 0; buy<=1; buy++){
                for(int limit = 1; limit<=2; limit++){
                    int profit = 0;
                    if(buy){
                        int buyStock = -prices[index] + next[0][limit];
                        int ignoreStock = 0 + next[1][limit];
                        profit = max(buyStock, ignoreStock); 
                    }
                    else{
                        int sellStock = prices[index] +next[1][limit-1];
                        int ignoreStock = 0 + next[0][limit];
                        profit = max(sellStock, ignoreStock);
                    }
                    curr[buy][limit]= profit;
                }
                next = curr;
            }
        }  
        return next[1][2];
    }

    int maxProfit(vector<int>& prices) {
        // int n = prices.size();
        // vector<vector<vector<int>>> dp(n, vector<vector<int>>(2,vector<int>(3,-1)));   
        // return solveMem(0,1,prices,dp,2 );
        return solveTab(prices);
    }
};